"""
Django settings for OpenEFT project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#h_^38vwwa8=863ftw#1%0()m-ic-e(l-54jvz)y2an+agkk11'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'conversion',
    'about',
    'viewer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'OpenEFT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'OpenEFT.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
TMP_DIR = os.environ.get("TMP_DIR")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR,"static"),
    TMP_DIR,
]
print(TMP_DIR)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import requests
import requests_cache

requests_cache.install_cache('my-cache')
about = requests.get("https://raw.githubusercontent.com/NoahGWood/OpenEFT/main/docs/about.md")
features = requests.get("https://raw.githubusercontent.com/NoahGWood/OpenEFT/main/docs/features.md")
donate = requests.get("https://raw.githubusercontent.com/NoahGWood/OpenEFT/main/docs/donate.md")
commits = requests.get("https://github.com/NoahGWood/OpenEFT/commits.atom")
discussions = requests.get("https://github.com/NoahGWood/OpenEFT/discussions.atom")
releases = requests.get("https://github.com/NoahGWood/OpenEFT/releases.atom")
with open(os.path.join(TMP_DIR, "about.md"),'wb') as f:
    f.write(about.content)
with open(os.path.join(TMP_DIR, "features.md"),'wb') as f:
    f.write(features.content)
with open(os.path.join(TMP_DIR, "donate.md"),'wb') as f:
    f.write(donate.content)
with open(os.path.join(TMP_DIR, "commits.xml"),'wb') as f:
    #f.write(b"<!Doctype xml>")
    f.write(commits.content)
with open(os.path.join(TMP_DIR, "discussions.xml"),"wb") as f:
    f.write(discussions.content)
with open(os.path.join(TMP_DIR, "releases.xml"),"wb") as f:
    f.write(releases.content)